import themes from './themes.js';
import cursors from './cursors.js';

export default class GameController {
  constructor(gamePlay, stateService) {
    this.gamePlay = gamePlay;
    this.stateService = stateService;
  }

  init() {
    this.gamePlay.drawUi(themes.prairie);
    this.gamePlay.addCellEnterListener(this.onCellEnter);
    this.gamePlay.addCellClickListener(this.onCellClick);
    this.gamePlay.addCellLeaveListener(this.onCellLeave);

    // TODO: add event listeners to gamePlay events
    // TODO: load saved stated from stateService
  }

  onCellClick(index) {
    // 9. –í—ã–±–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    // –ø—Ä–æ–≤–µ—Ä–∫–∞ - –±—ã–ª –ª–∏ –∫–ª–∏–∫ –ø–æ —á–∞—Ä—É –∏–≥—Ä–æ–∫–∞. –µ—Å–ª–∏ –¥–∞ - –∑–∞–ø–æ–º–Ω–∏—Ç—å –µ–≥–æ –∏–Ω–¥–µ–∫—Å –≤ gameState
    const clickedCharInd = this.gameState.chars.findIndex((elem) => {
      const { position, character } = elem;
      return (this.playersChars.includes(character.type) && position === index);
    });

    if (clickedCharInd !== -1) {
      this.selectCell(index);

      if (this.current) this.deselectCell(this.current.cell);

      this.current = {
        type: this.gameState.chars[clickedCharInd].character.type,
        cell: index,
        charInd: clickedCharInd,
      };
    }

    if (this.current.type === 'bowman') {
      const { charInd } = this.current;
      // 10.2 –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ–ø—É—Å—Ç–∏–º–æ—Å—Ç—å –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏—è
      const canGo = this.checkMovePossibility(index, 2);
      if (canGo) {
        this.gameState.chars[charInd].position = index;
        this.current.cell = index;
        this.current = undefined;
        this.redrawPositions(this.gameState.chars);
        this.setCursor(cursors.auto);
      }
    }
  }

  onCellEnter(index) {
    // 8. –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ üéñ1 ‚öî10 üõ°40 ‚ù§50

    const charInd = this.gameState.chars.findIndex((elem) => elem.position === index);
    if (charInd !== -1) {
      const element = this.gameState.chars[charInd].character;
      this.showCellTooltip(`
      üéñ ${element.level} ‚öî${element.attack} üõ° ${element.defense} ‚ù§ ${element.health}
      `, index);
    }

    if (!this.current) return;

    if (this.current.type === 'bowman') {
    // 10.2 –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ–ø—É—Å—Ç–∏–º–æ—Å—Ç—å –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏—è
      const canGo = this.checkMovePossibility(index, 2);
      if (canGo) {
        this.setCursor(cursors.pointer);
        this.selectCell(index, 'green');
      }

      // 10.3 –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ–ø—É—Å—Ç–∏–º–æ—Å—Ç—å –∞—Ç–∞–∫–∏
      const canAttack = this.checkAttackPossibility(index, 5);
      if (canAttack) {
        this.setCursor(cursors.crosshair);
        this.selectCell(index, 'red');
      }

      // 10.4 –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
      if (charInd !== -1) { this.setCursor(cursors.auto); return; }
      if (!canAttack && !canGo) this.setCursor(cursors.notallowed);
    }

    if (this.current.type === 'swordsman') {
    // 10.2 –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ–ø—É—Å—Ç–∏–º–æ—Å—Ç—å –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏—è
      const canGo = this.checkMovePossibility(index, 4);
      if (canGo) {
        this.setCursor(cursors.pointer);
        this.selectCell(index, 'green');
      }

      // 10.3 –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ–ø—É—Å—Ç–∏–º–æ—Å—Ç—å –∞—Ç–∞–∫–∏
      const canAttack = this.checkAttackPossibility(index, 5);
      if (canAttack) {
        this.setCursor(cursors.crosshair);
        this.selectCell(index, 'red');
      }

      // 10.4 –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
      if (charInd !== -1) { this.setCursor(cursors.auto); return; }
      if (!canAttack && !canGo) this.setCursor(cursors.notallowed);
    }
  }

  onCellLeave(index) {
    if (!this.current) return;
    this.setCursor(cursors.auto);

    // –ï—Å–ª–∏ —É–±—Ä–∞–ª–∏ –∫—É—Ä—Å–æ—Ä –Ω–µ —Å —á–∞—Ä–∞, —Ç–æ —É–¥–∞–ª–∏—Ç—å –∑–µ–ª–µ–Ω—É—é –æ–±–≤–æ–¥–∫—É —Å –∫–ª–µ—Ç–∫–∏
    if (index !== this.current.cell) {
      this.deselectCell(index);
    }
  }
}
